@using MudBlazor
@using MudBlazor.Services
@using MudBlazor.Utilities
@using Microsoft.AspNetCore.Components
@implements IDisposable




<MudForm  @ref="@form" Style="overflow: hidden">

            

                    <MudSelect @bind-Value="LocalThemeDto.NavBorderType" Label="Nav Border Type" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="NavBorderType.Neon"/>
                        <MudSelectItem Value="NavBorderType.DarkNeon"/>
                        <MudSelectItem Value="NavBorderType.LightNeon"/>
                        <MudSelectItem Value="NavBorderType.Dark"/>
                        <MudSelectItem Value="NavBorderType.Light"/>
                    </MudSelect>

                    <MudSelect @bind-Value="LocalThemeDto.BackgroundType" Label="Background Type" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="BackgroundType.DarkGradient"/>
                        <MudSelectItem Value="BackgroundType.LightGradient"/>
                        <MudSelectItem Value="BackgroundType.MaterialSvg1"/>
                        <MudSelectItem Value="BackgroundType.MaterialSvg2"/>
                    </MudSelect>

                <MudSelect @bind-Value="LocalThemeDto.BorderType" Label="Border Type" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="BorderType.None"/>
                    <MudSelectItem Value="BorderType.Neon"/>
                    <MudSelectItem Value="BorderType.Dark"/>
                    <MudSelectItem Value="BorderType.DarkNeon"/>
                    <MudSelectItem Value="BorderType.Light"/>
                    <MudSelectItem Value="BorderType.LightNeon"/>
                </MudSelect>

    <div style="margin: 2em" class=" d-flex align-center">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Small" OnClick="ApplyChanges">apply changes </MudButton>

    </div>

   
              
             

            </MudForm>




@code {
    MudForm? form;

    [Parameter]
    public ThemeDto LocalThemeDto { get; set; } = null!;

    [Parameter]
    public EventCallback<ThemeDto> ThemeDto { get; set; }

    private async Task ApplyChanges()
    {
        await ThemeDto.InvokeAsync(LocalThemeDto);
    }

    public void Dispose()
    {
        form?.Dispose();
    }

}